plugins {
    id 'com.moowork.node' version '1.1.1'
    id 'com.moowork.gulp' version '1.1.1'
}

apply plugin: 'war'

ext.contextPath = 'ROOT'
war.archiveName = 'ROOT.war'

dependencies {
    compile project(':common')
    testCompile project(path: ':common', configuration: 'testArtifacts')
}

task deployToTomcat(dependsOn: 'war') {
    doLast {
        logger.info("----------------------------------------------------")
        logger.info("Initialising deploy to Tomcat")
        logger.info("Base name is '${project.archivesBaseName}'")
        logger.info("Tomcat directory is ${tomcatHome}")
        logger.info("Deleting ${tomcatHome}\\webapps\\${war.archiveName}")

        delete "${tomcatHome}/webapps/${contextPath}"
        delete "${tomcatHome}/webapps/${war.archiveName}"

        logger.info("Copying file from ${war.archivePath} to ${tomcatHome}/webapps")
        copy {
            from war.archivePath
            into "${tomcatHome}/webapps"
        }

        logger.info("----------------------------------------------------")
    }
}

rebel {
    rebelXmlDirectory = file("build/rootContent/WEB-INF/classes")

    web {
        resource {
            directory = "build/rootContent/static"
            target = "/static/"
        }

        resource {
            directory = "build/rootContent/WEB-INF"
            includes = ["build.properties", "static-hashes.properties"]
            target = "/WEB-INF/"
        }

        resource {}

        resource {
            directory = "../common/src/main/webapp"
            target = "/"
        }
    }
}
generateRebel.dependsOn('webInf')

task commonWebInf(type: Copy) {
    from project(':common').file('src/main/webapp/WEB-INF')
    into file('build/rootContent/WEB-INF')
}

task webInf(type: Copy, dependsOn: 'commonWebInf') {
    from 'src/main/webapp/WEB-INF'
    into 'build/rootContent/WEB-INF'
}

task buildInformation(dependsOn: 'webInf') {
    doFirst {
        mkdir 'build/rootContent/WEB-INF'
    }

    outputs.file("build/rootContent/WEB-INF/build.properties")

    doLast {
        ant.tstamp {
            format(property: 'buildTime', pattern: 'yyyy-MM-dd\'T\'HH:mm:ssZ')
        }

        ant.propertyfile(file: "build/rootContent/WEB-INF/build.properties") {
            entry(key: "build.time", value: ant.buildTime)
            entry(key: "module.name", value: project.name)
            entry(key: "module.context", value: '')
        }
    }
}

task bamboo(dependsOn: ['clean', 'test', 'war']) {}
task deployApplicationLocally(dependsOn: ['war', 'deployToTomcat']) {}

gulp {
    colors = true
}

task installGulpDependencies(type: NpmTask) {
    inputs.file 'package.json'
    outputs.dir 'node_modules'

    args = ['install', '-d']
}

gulp_assets.inputs.files 'gulpfile.js', 'src/main/assets/static'
gulp_assets.outputs.dir 'build/rootContent/static'

// run npm install
gulp_assets.dependsOn 'installGulpDependencies'

// run gulp install
gulp_assets.dependsOn 'installGulp'

def srcDir = new File(projectDir, "src/main/static")
def targetDir = new File(project.buildDir, "static")
gulp_dist.inputs.dir srcDir
gulp_dist.outputs.dir targetDir

war {
    dependsOn gulp_assets, buildInformation
    rootSpec.exclude '**/WEB-INF'
    webInf { from 'build/rootContent/WEB-INF' }
    from 'build/rootContent'
}

test {
    onlyIf {
        !project.hasProperty('integrationTest')
    }
}