<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://go.warwick.ac.uk/elab-schemas/filterstack http://go.warwick.ac.uk/elab-schemas/filters.xsd">

	<import resource="properties-context.xml" />
	<import resource="persistence-context.xml" />
	
	<!-- Needed to enable use of the uk.ac.warwick.spring.Wire object -->
	<bean class="uk.ac.warwick.spring.SpringConfigurer" />

	<!-- fire up annotation driven everything -->
	<context:annotation-config />
	<context:component-scan base-package="uk.ac.warwick.tabula.web.controllers" />
	<context:component-scan base-package="uk.ac.warwick.tabula.services" />
	<context:component-scan base-package="uk.ac.warwick.tabula.data" />
	<context:component-scan base-package="uk.ac.warwick.tabula.jobs" />
	
	<!-- For sub-modules to implement their own component scanning -->
	<import resource="spring-component-scan-context.xml" />
	
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
		p:basename="messages" />
		
	<bean id="defaultEventListener" class="uk.ac.warwick.tabula.events.CompositeEventListener" abstract="true">
		<constructor-arg index="0">
			<list>
				<bean class="uk.ac.warwick.tabula.events.Log4JEventListener" />
				<bean class="uk.ac.warwick.tabula.events.DatabaseEventListener" />
			</list>
		</constructor-arg>
	</bean>
		
	<import resource="event-listener-context.xml" />
	
	<bean id="json" class="uk.ac.warwick.tabula.JsonObjectMapperFactory" />
	
	<!-- Catches all exceptions that go through Spring.
		If an exception escapes Spring, it will go to the handler in web.xml,
		which is served by the ErrorController at /error/, which delegates to this.
		So this should be handling all exceptions.
	 -->
	<bean id="defaultExceptionResolver" class="uk.ac.warwick.tabula.system.exceptions.ExceptionResolver" p:order="0"
		p:defaultView="errors/500" abstract="true">
		<property name="viewMappings">
			<map>
				<entry key="uk.ac.warwick.tabula.PermissionDeniedException" value="errors/permissionDenied" />
				<entry key="uk.ac.warwick.tabula.ItemNotFoundException" value="errors/404" />
				<entry key="uk.ac.warwick.tabula.services.MaintenanceModeEnabledException" value="errors/maintenance" />
			</map>
		</property>
	</bean> 
	
	<import resource="exception-resolver-context.xml" />
	 	
	<bean id="defaultExceptionHandler" class="uk.ac.warwick.tabula.system.exceptions.CompositeExceptionHandler" abstract="true">
		<constructor-arg index="0">
			<list>
				<bean class="uk.ac.warwick.tabula.system.exceptions.LoggingExceptionHandler" />
				<bean class="uk.ac.warwick.tabula.system.exceptions.EmailingExceptionHandler" />
			</list>
		</constructor-arg>
	</bean>
	
	<import resource="exception-handler-context.xml" />
	
	<!-- validation -->
	<bean id="validatorFactory" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" 
		p:validationMessageSource-ref="messageSource" />
		
	<bean id="validator" class="uk.ac.warwick.tabula.validators.CompositeValidator">
		<constructor-arg>
			<list>
				<ref bean="validatorFactory" />
			</list>
		</constructor-arg>
	</bean>
	
	<bean id="defaultTypeConverter"
      class="org.springframework.format.support.FormattingConversionServiceFactoryBean" abstract="true">
      <description>
      	Converts arguments in various places.
      	Useful to convert @PathVariable arguments from String to the object it represents.
      	
      	Converters are used when binding request values to command.
      	Formatters are used for displaying command values as a string in views. spring.bind uses formatters.   
      </description>
	    <property name="converters">
	        <list>
	            <bean class="uk.ac.warwick.tabula.data.convert.DepartmentCodeConverter"/>
	            <bean class="uk.ac.warwick.tabula.data.convert.ModuleCodeConverter"/>
	            <bean class="uk.ac.warwick.tabula.data.convert.AssignmentIdConverter"/>
	            <bean class="uk.ac.warwick.tabula.data.convert.UpstreamAssignmentIdConverter"/>
	            <bean class="uk.ac.warwick.tabula.data.convert.FeedbackIdConverter"/>
				<bean class="uk.ac.warwick.tabula.data.convert.FeedbackTemplateIdConverter"/>
	            <bean class="uk.ac.warwick.tabula.data.convert.SubmissionIdConverter"/>
	            <bean class="uk.ac.warwick.tabula.data.convert.FileAttachmentIdConverter"/>
	            <bean class="uk.ac.warwick.tabula.data.convert.MarkSchemeIdConverter"/>
	        </list>
	    </property>
	    <property name="formatters">
	    	<list>
	    		<bean class="uk.ac.warwick.tabula.data.convert.FileAttachmentIdConverter"/>
	            <bean class="uk.ac.warwick.tabula.data.convert.AssignmentIdConverter"/>
	            <bean class="uk.ac.warwick.tabula.data.convert.UpstreamAssignmentIdConverter"/>
	        </list>
	    </property>
	</bean>

	<import resource="type-converter-context.xml"/>
	
	<!-- Resolves user from request but can also be used sparingly elsewhere to generate a CurrentUser from Users -->
	<bean id="currentUserInterceptor" class="uk.ac.warwick.tabula.system.CurrentUserInterceptor" />
	
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<ref bean="currentUserInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="uk.ac.warwick.tabula.system.RequestInfoInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="uk.ac.warwick.tabula.system.ConditionalInterceptor" p:excludePath="/static/*">
				<constructor-arg>
					<bean class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor" autowire="byName" />
				</constructor-arg>
			</bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="uk.ac.warwick.tabula.system.ControllerPreRequestInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
	<bean id="propertyEditorRegistrar" class="uk.ac.warwick.tabula.system.CommonPropertyEditors" />
	
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"
		p:order="1"
		p:useSuffixPatternMatch="false" /><!-- so that {pathvariables} match extensions at end of url -->
	
	<bean id="webBindingInitializer" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer" 
		p:conversionService-ref="typeConverter"
		p:validator-ref="validator"
		p:propertyEditorRegistrar-ref="propertyEditorRegistrar" /> 
	<bean id="requestMappingHandlerAdapter" class="uk.ac.warwick.tabula.system.HandlerAdapter" p:order="0"
		p:webBindingInitializer-ref="webBindingInitializer">
		<property name="customArgumentResolvers">
			<list>
				<bean class="uk.ac.warwick.tabula.system.CurrentUserMethodArgumentResolver" />
			</list>
		</property>
		<property name="customPreReturnValueHandlers">
			<list>
				<bean class="uk.ac.warwick.tabula.system.MavReturnValueHandler" />
				<bean class="uk.ac.warwick.tabula.system.XmlReturnValueHandler" />
			</list>
		</property>
	</bean>

	<util:properties id="staticHashes" location="/WEB-INF/static-hashes.properties" />
	
	<!-- get app server to handle static content -->
	<mvc:default-servlet-handler />
	
	<bean id="characterEncodingFilter" class="org.springframework.web.filter.CharacterEncodingFilter"
		p:encoding="UTF-8" p:forceEncoding="true" />
		
	<bean id="oAuthFilter" class="uk.ac.warwick.sso.client.oauth.OAuthFilter" />
	
	<bean id="priorityTaskExecutionService" class="uk.ac.warwick.util.concurrency.TaskExecutionService" destroy-method="shutdown">
		<constructor-arg value="4" type="int" />
	</bean>
	
	<bean id="studentMailSender" class="uk.ac.warwick.tabula.services.RedirectingMailSender">
		<constructor-arg ref="mailSender" />
	</bean>
	
	<bean id="mailSender"
		class="uk.ac.warwick.util.mail.AsynchronousWarwickMailSender">
		<constructor-arg index="0" ref="priorityTaskExecutionService" />
		<constructor-arg index="1">
			<bean
				class="org.springframework.mail.javamail.JavaMailSenderImpl">
				<property name="host" value="${mail.smtp.host}" />
			</bean>
		</constructor-arg>
	</bean>
	
	<filter-stack id="commonFilters" xmlns="http://go.warwick.ac.uk/elab-schemas/filterstack">
		<mapping>
			<filter ref="characterEncodingFilter" />
			<url-pattern>/*</url-pattern>
			<excluded-url-pattern>/static/*</excluded-url-pattern>
			<excluded-url-pattern>/favicon.ico</excluded-url-pattern>
			<excluded-url-pattern>*.ftl</excluded-url-pattern>
		</mapping>
		<mapping>
			<filter ref="ssoClientFilter" />
			<filter ref="oAuthFilter" />
			<url-pattern>/*</url-pattern>
			<excluded-url-pattern>/static/*</excluded-url-pattern>
			<excluded-url-pattern>/favicon.ico</excluded-url-pattern>
			<excluded-url-pattern>*.ftl</excluded-url-pattern>
			<excluded-url-pattern>/test/up</excluded-url-pattern>
		</mapping>
		<mapping>
			<filter ref="forceLoginFilter" />
			<filter ref="sysadminGroupFilter" />
			<url-pattern>/sysadmin/*</url-pattern>
			<excluded-url-pattern>*.ftl</excluded-url-pattern>
		</mapping>
	</filter-stack>
	
	<bean id="ssoClientFilter" class="uk.ac.warwick.sso.client.SSOClientFilter"
		p:detectAnonymousOnCampusUsers="true"
		p:userLookup-ref="userLookup"
		p:configLocation="/tabula-sso-config.xml" />
		
	<bean id="forceLoginFilter" class="uk.ac.warwick.sso.client.ForceLoginFilter" />
	
	<bean id="sysadminGroupFilter" class="uk.ac.warwick.sso.client.UserInWebGroupFilter"
		p:group="in-tabula-sysadmins"
		p:groupService="#{realUserLookup.groupService}" />
		<!-- FIXME groupservice wont be switched out for a maintenance version -->
	
	<bean id="userLookup" class="uk.ac.warwick.tabula.services.SwappableUserLookupService">
		<constructor-arg ref="realUserLookup" />
	</bean>
	
	<bean id="realUserLookup" class="uk.ac.warwick.tabula.services.UserLookupServiceImpl" autowire-candidate="false">
		<constructor-arg>
			<bean id="u" class="uk.ac.warwick.userlookup.UserLookup" autowire-candidate="false" 
				p:ssosUrl="${ssoclient.ssos.url}"
				p:groupServiceLocation="${ssoclient.webgroups.url}" />
		</constructor-arg>
	</bean>
	
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"
		p:templateLoaderPath="/WEB-INF/freemarker/"
		p:configuration-ref="freemarkerConfiguration" />
	
	<bean id="dateTimeFormatter" class="org.joda.time.format.ISODateTimeFormat" factory-method="dateTimeNoMillis" />
	
	<bean id="defaultFreemarkerConfiguration" class="uk.ac.warwick.tabula.web.views.ScalaFreemarkerConfiguration" abstract="true">
		<property name="sharedVariables">
			<map>
				<entry key="url"><bean class="uk.ac.warwick.tabula.web.views.UrlMethodModel" /></entry>
				<entry key="rootUrl" value="${toplevel.url}${module.context}" />				
				<entry key="userlookup"><bean class="uk.ac.warwick.tabula.web.views.UserLookupTag" /></entry>
				<entry key="permissions"><bean class="uk.ac.warwick.tabula.web.views.PermissionFunction" /></entry>
				<entry key="theYear"><bean class="uk.ac.warwick.tabula.web.views.TheYear" /></entry>
				<entry key="features" value-ref="features" />
				<entry key="appBuildDate">
					<bean factory-bean="dateTimeFormatter" factory-method="parseDateTime">
						<constructor-arg value="${build.time}" />
					</bean>
				</entry>
				<entry key="dateBuilder"><bean class="uk.ac.warwick.tabula.helpers.DateBuilder" /></entry>
				<entry key="durationFormatter"><bean class="uk.ac.warwick.tabula.helpers.DurationFormatterTag" /></entry>
			</map>
		</property>
	</bean>
	
	<import resource="freemarker-configuration-context.xml" />
	
	<bean class="org.springframework.web.context.support.ServletContextAttributeExporter">
		<property name="attributes"><map>
			<entry key="freemarkerConfiguration" value-ref="freemarkerConfiguration" />
		</map></property>
	</bean>
			
	<bean id="redirectViewResolver" class="uk.ac.warwick.tabula.web.views.RedirectViewResolver" 
		p:toplevelUrl="${toplevel.url}"
		p:context="${module.context}"
		p:order="1" />
	<bean id="viewResolver" class="org.springframework.web.servlet.view.tiles2.TilesViewResolver"
		p:order="2" />

	<bean id="parser" class="org.springframework.expression.spel.standard.SpelExpressionParser"/>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

	
	<beans profile="scheduling">
		<!-- @Scheduled -->
		<task:annotation-driven/>
	</beans>
	
	<beans profile="web">
		
	</beans>
	
	<beans profile="dev">
	</beans>
	
	<beans profile="production">
	</beans>
	
	<beans profile="dev,production,console">
		
	</beans>
	
	<beans profile="dev,production">
	
			<!-- JMX -->
	
			<!-- Custom FactoryBean that will try to pick the JBoss MBeanServer 
		       when there is a choice of MBeanServers (such as when jconsole
		       support is installed). -->
		  <bean id="jmxServerLocator" class="uk.ac.warwick.util.core.spring.JbossJmxServerLocator" />
		
		  <!-- ## auto exported beans ## -->
		  
		  
		  <!-- ## auto exporters ## -->
		  
		  <bean id="jmxAttributeSource" class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>
		  
		  <bean id="jmxAssembler" class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
		    <property name="attributeSource" ref="jmxAttributeSource" />
		  </bean>
		  <bean id="jmxNamingStrategy" class="org.springframework.jmx.export.naming.MetadataNamingStrategy">
		        <property name="attributeSource" ref="jmxAttributeSource"/>
		  </bean>
		  <bean id="autoExporter" class="org.springframework.jmx.export.MBeanExporter">
		  	<description>Exports beans annotated with @ManagedResource</description>
		  	<property name="autodetect" value="true" />  
		  	<property name="assembler" ref="jmxAssembler"/>
		  	<property name="namingStrategy" ref="jmxNamingStrategy" />
		    <property name="server" ref="jmxServerLocator" />
		  </bean>
		  
		    <!-- ## manually exported beans ## -->

		  <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" 
		  		lazy-init="false"
		  		autowire="no"> <!-- don't autowire the Annotation assembler below. -->
		    <property name="server" ref="jmxServerLocator" />
		    <property name="beans">
		      <map>
		        <entry key="tabula-${module.name}:name=features" value-ref="features" />
		      </map>
		    </property>
		  </bean>
		  
		<bean id="defaultTilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"
			p:definitionsFactoryClass="uk.ac.warwick.tabula.web.views.ImpliedDefinitionsFactory" abstract="true">
			<property name="definitions">
				<list>
					<value>/WEB-INF/defs/common-views.xml</value>
				</list>
			</property>
			<property name="tilesProperties">
				<props>
					<prop key="#{T(org.apache.tiles.definition.DefinitionsFactory).DEFINITION_DAO_INIT_PARAM}">
						org.apache.tiles.definition.dao.ResolvingLocaleUrlDefinitionDAO
					</prop>
				</props>
			</property>
		</bean>
	
		<import resource="tiles-context.xml" />
	</beans>

</beans>
